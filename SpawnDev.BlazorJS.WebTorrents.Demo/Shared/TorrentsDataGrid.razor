@using System.Linq.Dynamic.Core
@using SpawnDev.BlazorJS.JSObjects

<RadzenDataGrid SelectionMode="DataGridSelectionMode.Single" RowSelect="RowSelect" RowDeselect="RowDeselect"
                AllowColumnResize="true" @ref="grid" style="height: 100%; width: 100%" GridLines="DataGridGridLines.Both"
                TItem="TorrentsDataGridItem" IsLoading=@isLoading Count="@count" Data="@Torrents" LoadData="@LoadData" AllowSorting="true" AllowFiltering="true" AllowPaging="false"
                CellContextMenu="ShowContextMenuWithItems">
    <Columns>
        <RadzenDataGridColumn TItem="TorrentsDataGridItem" Filterable="false" Property="Progress" Title="%" Width="66px" TextAlign="TextAlign.Center">
            <Template Context="torrent">
                <RadzenProgressBarCircular Size="ProgressBarCircularSize.Small" ProgressBarStyle="@torrent.ProgressBarStyle" Value="@(Math.Round(torrent.Progress * 100d))" />
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="TorrentsDataGridItem" Property="Name" Width="300px" Title="Name" TextAlign="TextAlign.Left" />
        <RadzenDataGridColumn TItem="TorrentsDataGridItem" Filterable="false" Property="TimeRemaining" Title="TimeRemaining" Width="150px" TextAlign="TextAlign.Center">
            <Template Context="torrent">
                @(HumanReadableSeconds(torrent.TimeRemaining))
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="TorrentsDataGridItem" Filterable="false" Property="Seeds" Title="Seeds" Width="90px" TextAlign="TextAlign.Center">
            <Template Context="torrent">
                @torrent.Seeds (@torrent.TotalSeeders)
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="TorrentsDataGridItem" Filterable="false" Property="Peers" Title="Peers" Width="90px" TextAlign="TextAlign.Center">
            <Template Context="torrent">
                @torrent.Peers (@torrent.TotalPeers)
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="TorrentsDataGridItem" Filterable="false" Property="DownloadSpeed" Title="Download Speed" Width="150px" TextAlign="TextAlign.Center">
            <Template Context="torrent">
                @(ReadableBps(torrent.DownloadSpeed))
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="TorrentsDataGridItem" Filterable="false" Property="UploadSpeed" Title="Upload Speed" Width="150px" TextAlign="TextAlign.Center">
            <Template Context="torrent">
                @(ReadableBps(torrent.UploadSpeed))
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="TorrentsDataGridItem" Filterable="false" Property="Downloaded" Title="Downloaded" Width="150px" TextAlign="TextAlign.Center">
            <Template Context="torrent">
                @(ReadableByteLength(torrent.Downloaded))
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="TorrentsDataGridItem" Filterable="false" Property="Length" Title="Size" Width="150px" TextAlign="TextAlign.Center">
            <Template Context="torrent">
                @(ReadableByteLength(torrent.Length))
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="TorrentsDataGridItem" Property="InfoHash" Title="InfoHash" Width="350px" TextAlign="TextAlign.Left" />
        <!-- Below Column fixes a sizing bug if all columns have a specified width -->
        <RadzenDataGridColumn TItem="TorrentsDataGridItem" Filterable="false" Sortable="false"><Template Context="data"></Template></RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>

@code {
    [Inject]
    BlazorJSRuntime JS { get; set; }
    [Inject]
    ContextMenuService ContextMenuService { get; set; }
    [Inject]
    DialogService DialogService { get; set; }
    [Parameter]
    public EventCallback<string> SelectedTorrentChanged { get; set; }
    [Inject]
    AppService AppService { get; set; }
    [Inject]
    WebTorrentService WebTorrentService { get; set; }
    public Dictionary<string, TorrentsDataGridItem> torrentsDataGridItems { get; private set; } = new Dictionary<string, TorrentsDataGridItem>();
    RadzenDataGrid<TorrentsDataGridItem> grid { get; set; }
    int count;
    IEnumerable<TorrentsDataGridItem> Torrents = new List<TorrentsDataGridItem>();
    bool isLoading = false;
    System.Timers.Timer _tmr = new();
    public string SelectedTorrentInstanceId { get; set; } = "";
    public TorrentsDataGridItem? SelectedTorrentInfo { get; private set; } = null;
    string HumanReadableSeconds(double duration)
    {
        return duration > TimeSpan.MaxValue.TotalSeconds ? "∞" : string.Format("{0:dd\\.hh\\:mm\\:ss}", TimeSpan.FromSeconds(duration));
    }
    void ShowContextMenuWithItems(DataGridCellMouseEventArgs<TorrentsDataGridItem> args)
    {
        var selectedTorrentInfo = args.Data;
        if (selectedTorrentInfo == null) return;
        ContextMenuService.Open(args,
            new List<ContextMenuItem> {
                new ContextMenuItem(){ Text = "Pause", Disabled = selectedTorrentInfo.Torrent.Paused, Icon = "pause", Value = () =>
                {
                    selectedTorrentInfo?.Torrent.Pause();
                }},
                new ContextMenuItem(){ Text = "Resume", Disabled = !selectedTorrentInfo.Torrent.Paused, Icon = "play_arrow", Value = () =>
                {
                    selectedTorrentInfo?.Torrent.Resume();
                } },
                new ContextMenuItem(){ Text = "Deselect All", Disabled = selectedTorrentInfo.Torrent.Selections.Length == 0, Icon = "deselect", Value = () =>
                {
                    selectedTorrentInfo?.Torrent.DeselectAll();
                } },
                new ContextMenuItem(){ Text = "Select All", Icon = "done_all", Value = () =>
                {
                    selectedTorrentInfo?.Torrent.SelectAll();
                } },
                new ContextMenuItem(){ Text = "Delete", Icon = "delete", Value = async () =>
                {
                    if (selectedTorrentInfo == null) return;
                    try
                    {
                        var confirmation = await DialogService.Confirm($"Delete {selectedTorrentInfo.Torrent.Name}?");
                        if (confirmation == true)
                        {
                            await selectedTorrentInfo?.Torrent.DestroyAsync(new DestroyTorrentOptions{ DestroyStore = true });
                        }
                    }catch{}
                } },
                new ContextMenuItem(){ Text = "Save Torrent", Icon = "save", Disabled=selectedTorrentInfo.Torrent.TorrentFileBlob == null, Value = async () =>
                {
                    try
                    {
                        await selectedTorrentInfo.Torrent.TorrentFileBlob!.StartDownload($"{selectedTorrentInfo.Name}.torrent");
                    }
                    catch
                    {

                    }
                } },
                new ContextMenuItem(){ Text = "Copy Magnet", Disabled = string.IsNullOrEmpty(selectedTorrentInfo.InfoHash), Icon = "link", Value = () =>
                {
                    if (selectedTorrentInfo != null)
                    {
                        using var navigator = JS.Get<Navigator>("navigator");
                        using var clipboard = navigator.Clipboard;
                        clipboard.WriteText(selectedTorrentInfo.Torrent.MagnetURI ?? "");
                    }
                } },
                new ContextMenuItem(){ Text = "Copy InfoHash", Disabled = string.IsNullOrEmpty(selectedTorrentInfo.InfoHash), Icon = "tag", Value = () =>
                {
                    if (selectedTorrentInfo != null)
                    {
                        using var navigator = JS.Get<Navigator>("navigator");
                        using var clipboard = navigator.Clipboard;
                        clipboard.WriteText(selectedTorrentInfo.InfoHash);
                    }
                } },
                        }, OnMenuItemClick);
    }
    void OnMenuItemClick(MenuItemEventArgs args)
    {
        Console.WriteLine($"Menu item with Value={args.Value} clicked");
        if (args.Value is Action action)
        {
            action();
        }
        else if (args.Value is Func<Task> task)
        {
            _ = task();
        }
        ContextMenuService.Close();
    }
    async Task RowSelect(TorrentsDataGridItem torrentStateInfo)
    {
        Console.WriteLine("RowSelect");
        SelectedTorrentInfo = torrentStateInfo;
        SelectedTorrentInstanceId = torrentStateInfo.InstanceId;
        await SelectedTorrentChanged.InvokeAsync(SelectedTorrentInstanceId);
        await AppService.SelectTorrentsDataGridItem(SelectedTorrentInfo);
    }
    async Task RowDeselect(TorrentsDataGridItem torrentStateInfo)
    {
        Console.WriteLine("RowDeselect");
        SelectedTorrentInstanceId = "";
        SelectedTorrentInfo = null;
        await SelectedTorrentChanged.InvokeAsync(SelectedTorrentInstanceId);
        await AppService.SelectTorrentsDataGridItem(SelectedTorrentInfo);
    }
    static string ReadableBps(double len)
    {
        return $"{ReadableByteLength(len)}/s";
    }
    static string ReadableByteLength(double len)
    {
        string[] sizes = { "B", "KB", "MB", "GB", "TB" };
        int order = 0;
        while (len >= 1024 && order < sizes.Length - 1)
        {
            order++;
            len = len / 1024;
        }
        // Adjust the format string to your preferences. For example "{0:0.#}{1}" would
        // show a single decimal place, and no space.
        return string.Format("{0:0.##} {1}", len, sizes[order]);
    }
    async Task Reset()
    {
        grid.Reset(true);
        await grid.FirstPage(true);
    }
    async Task LoadData(LoadDataArgs args)
    {
        isLoading = true;
        await Task.Yield();
        var query = torrentsDataGridItems.Values.AsQueryable();
        if (!string.IsNullOrEmpty(args.Filter)) query = query.Where(args.Filter);
        if (!string.IsNullOrEmpty(args.OrderBy)) query = query.OrderBy(args.OrderBy);
        count = query.Count();
        Torrents = query.Skip(args.Skip!.Value).Take(args.Top!.Value).ToList();
        isLoading = false;
    }
    void Timer_Elapsed(object? sender, System.Timers.ElapsedEventArgs e)
    {
        StateHasChanged();
    }
    protected override void OnAfterRender(bool firstRender)
    {
        _tmr.Enabled = false;
        _tmr.Enabled = true;
        if (firstRender)
        {
            grid.Reload();
        }
    }
    protected override void OnInitialized()
    {
        WebTorrentService.OnTorrentAdd += WebTorrent_OnTorrentAdd;
        WebTorrentService.OnTorrentRemove += WebTorrent_OnTorrentRemove;
        WebTorrentService.OnTorrentWireAdd += WebTorrent_OnTorrentWireAdd;
        WebTorrentService.OnTorrentWireRemove += WebTorrent_OnTorrentWireRemove;
        _tmr.Elapsed += Timer_Elapsed;
        _tmr.Interval = 1000;
        using var torrents = WebTorrentService.Client!.Torrents;
        var infos = torrents!.ToArray().ToList().Select(o => new TorrentsDataGridItem(o));
        foreach (var info in infos)
        {
            torrentsDataGridItems.Add(info.InstanceId, info);
        }
    }
    bool Disposed = false;
    public void Dispose()
    {
        Disposed = true;
        _tmr.Enabled = false;
        _tmr.Elapsed -= Timer_Elapsed;
        WebTorrentService.OnTorrentAdd -= WebTorrent_OnTorrentAdd;
        WebTorrentService.OnTorrentRemove -= WebTorrent_OnTorrentRemove;
        WebTorrentService.OnTorrentWireAdd -= WebTorrent_OnTorrentWireAdd;
        WebTorrentService.OnTorrentWireRemove -= WebTorrent_OnTorrentWireRemove;
    }
    void WebTorrent_OnTorrentAdd(Torrent torrent)
    {
        var info = new TorrentsDataGridItem(torrent);
        torrentsDataGridItems.Add(info.InstanceId, info);
        grid.Reload();
    }
    void WebTorrent_OnTorrentRemove(Torrent torrent)
    {
        torrentsDataGridItems.Remove(torrent.InstanceId);
        grid.Reload();
    }
    void WebTorrent_OnTorrentWireAdd(Torrent torrent, Wire wire)
    {
        StateHasChanged();
    }
    void WebTorrent_OnTorrentWireRemove(Torrent torrent, Wire wire)
    {
        StateHasChanged();
    }
}
