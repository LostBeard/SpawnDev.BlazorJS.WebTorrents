@using System.Linq.Dynamic.Core

<RadzenDataGrid SelectionMode="DataGridSelectionMode.Single" RowSelect="RowSelect" RowDeselect="RowDeselect"
                AllowColumnResize="true" @ref="grid" style="height: 100%; width: 100%;" GridLines="DataGridGridLines.Both" TItem="FilesDataGridItem" IsLoading=@isLoading
                Count="@count" Data="@Files" LoadData="@LoadData" AllowSorting="true" AllowFiltering="true" AllowPaging="false"
                CellContextMenu="ShowContextMenuWithItems">
    <Columns>
        <RadzenDataGridColumn TItem="FilesDataGridItem" Filterable="false" Property="Progress" Title="%" Width="66px" TextAlign="TextAlign.Right">
            <Template Context="torrent">
                <RadzenProgressBarCircular Size="ProgressBarCircularSize.Small" ProgressBarStyle="@torrent.ProgressBarStyle" Value="@(Math.Round(torrent.Progress * 100d))" />
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="FilesDataGridItem" Filterable="false" Property="MimeType" Title="Type" Width="70px" TextAlign="TextAlign.Center">
            <Template Context="torrent">
                <RadzenImage Style="width: 32px; height: 32px;" Path="@torrent.ImageHref" title="@torrent.MimeType" />
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="FilesDataGridItem" Filterable="true" Property="Name" Width="300px" Title="Name" TextAlign="TextAlign.Left" />
        <RadzenDataGridColumn TItem="FilesDataGridItem" Filterable="false" Property="Downloaded" Title="Downloaded" Width="150px" TextAlign="TextAlign.Center">
            <Template Context="torrent">
                @(ReadableByteLength(torrent.Downloaded))
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="FilesDataGridItem" Filterable="false" Property="Length" Title="Size" Width="150px" TextAlign="TextAlign.Center">
            <Template Context="torrent">
                @(ReadableByteLength(torrent.Length))
            </Template>
        </RadzenDataGridColumn>
        <!-- Below Column fixes a sizing bug if all columns have a specified width -->
        <RadzenDataGridColumn TItem="FilesDataGridItem" Filterable="false" Sortable="false"><Template Context="data"></Template></RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>

@code {
    [Inject]
    WebTorrentService WebTorrentService { get; set; }
    [Inject]
    AppService AppService { get; set; }
    [Inject]
    BlazorJSRuntime JS { get; set; }
    [Inject]
    ContextMenuService ContextMenuService { get; set; }
    [Inject]
    DialogService DialogService { get; set; }
    [Parameter]
    public string TorrentInstanceId { get; set; }
    [Parameter]
    public EventCallback<string> SelectedChanged { get; set; }
    [Inject]
    MimeTypeService MimeTypeService { get; set; }
    Torrent? Torrent { get; set; }
    RadzenDataGrid<FilesDataGridItem> grid { get; set; }
    int count;
    IEnumerable<FilesDataGridItem> Files = new List<FilesDataGridItem>();
    bool isLoading = false;
    System.Timers.Timer _tmr = new();
    protected override void OnParametersSet()
    {
        if (Torrent != null)
        {
            if (Torrent.InstanceId == TorrentInstanceId)
            {
                return;
            }
        }
        Torrent = WebTorrentService.Client!.GetTorrentByInstanceId(TorrentInstanceId);
        filesDataGridItems.Clear();
        if (Torrent != null)
        {
            using var files = Torrent!.Files;
            var infos = files!.ToArray().Select(o => new FilesDataGridItem(Torrent, o, MimeTypeService.GetExtensionMimeType(o.Name), MimeTypeService.GetExtensionImageHref(o.Name)));
            foreach (var info in infos)
            {
                filesDataGridItems.Add(info.Path, info);
            }
        }
        grid?.Reload();
    }
    public FilesDataGridItem? SelectedInfo { get; private set; }
    public string SelectedInstanceId => SelectedInfo?.InstanceId ?? "";
    async Task RowSelect(FilesDataGridItem info)
    {
        Console.WriteLine("RowSelect");
        SelectedInfo = info;
        await SelectedChanged.InvokeAsync(SelectedInstanceId);
        await AppService.SelectFilesDataGridItem(SelectedInfo);
        Console.WriteLine("RowSelect");
    }
    async Task RowDeselect(FilesDataGridItem info)
    {
        Console.WriteLine("RowDeselect");
        SelectedInfo = null;
        await SelectedChanged.InvokeAsync(SelectedInstanceId);
        await AppService.SelectFilesDataGridItem(SelectedInfo);
    }
    static string ReadableBps(double len)
    {
        return $"{ReadableByteLength(len)}/s";
    }
    static string ReadableByteLength(double len)
    {
        string[] sizes = { "B", "KB", "MB", "GB", "TB" };
        int order = 0;
        while (len >= 1024 && order < sizes.Length - 1)
        {
            order++;
            len = len / 1024;
        }
        return String.Format("{0:0.##} {1}", len, sizes[order]);
    }
    async Task Reset()
    {
        grid.Reset(true);
        await grid.FirstPage(true);
    }
    public Dictionary<string, FilesDataGridItem> filesDataGridItems { get; private set; } = new Dictionary<string, FilesDataGridItem>();
    async Task LoadData(LoadDataArgs args)
    {
        isLoading = true;
        await Task.Yield();
        var fileInfos = filesDataGridItems.Values;
        var query = fileInfos.AsQueryable();
        if (!string.IsNullOrEmpty(args.Filter))
        {
            // Filter via the Where method
            query = query.Where(args.Filter);
        }
        if (!string.IsNullOrEmpty(args.OrderBy))
        {
            // Sort via the OrderBy method
            query = query.OrderBy(args.OrderBy);
        }
        count = query.Count();
        Files = query.Skip(args.Skip!.Value).Take(args.Top!.Value).ToList();
        isLoading = false;
    }
    void Timer_Elapsed(object? sender, System.Timers.ElapsedEventArgs e)
    {
        StateHasChanged();
    }
    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            grid.Reload();
        }
    }
    protected override void OnInitialized()
    {
        _tmr.Elapsed += Timer_Elapsed;
        _tmr.Interval = 1000;
        _tmr.Enabled = true;
    }
    public void Dispose()
    {
        _tmr.Enabled = false;
        _tmr.Elapsed -= Timer_Elapsed;
    }
    void ShowContextMenuWithItems(DataGridCellMouseEventArgs<FilesDataGridItem> args)
    {
        var selected = args.Data;
        if (selected == null) return;
        ContextMenuService.Open(args,
            new List<ContextMenuItem> {
                new ContextMenuItem(){ Text = "Deselect", Disabled = selected.File.IsDone() || selected.Torrent.Selections.Length == 0, Icon = "deselect", Value = () =>
                {
                    selected.File.Deselect();
                } },
                new ContextMenuItem(){ Text = "Select", Disabled = selected.File.IsDone(), Icon = "done", Value = () =>
                {
                    selected.File.Select();
                } },
                new ContextMenuItem(){ Text = "Save File", Icon = "save", Disabled=!selected.File.IsDone(), Value = async () =>
                {
                    try
                    {
                        using var blob = await selected.File.Blob();
                        if (blob != null)
                        {
                            await blob.StartDownload(selected.Name);
                        }
                    }
                    catch
                    {

                    }
                } },
            }, OnMenuItemClick);
    }
    void OnMenuItemClick(MenuItemEventArgs args)
    {
        if (args.Value is Action action)
        {
            action();
        }
        else if (args.Value is Func<Task> task)
        {
            _ = task();
        }
        ContextMenuService.Close();
    }
}
