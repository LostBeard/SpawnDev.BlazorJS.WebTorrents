@inherits LayoutComponentBase
@using SpawnDev.BlazorJS.JSObjects;
@using SpawnDev.BlazorJS.Toolbox;

<RadzenComponents />
<RadzenLayout>
    <RadzenHeader>
        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0">
            <RadzenSidebarToggle Style="margin: 0;" Click="@(() => sidebar1Expanded = !sidebar1Expanded)" />
            <div>
                <RadzenMenu Click="OnMenuClicked">
                    <RadzenMenuItem Text="Torrent" Image="favicon.png">
                        <RadzenMenuItem Text="New Seed" Value="@("seed_files")" Icon="add_circle"></RadzenMenuItem>
                        <RadzenMenuItem Text="Add Magnet" Value="@("add_magnet")" Icon="data_saver_on"></RadzenMenuItem>
                        <RadzenMenuItem Text="Add Torrent" Value="@("torrent_file_picker")" Icon="add"></RadzenMenuItem>
                        <RadzenMenuItem Text="Creative Commons" Icon="spoke">
                            @foreach (var CCMagnet in WebTorrentService.CCMagnets)
                            {
                                <RadzenMenuItem Text="@($"Add {CCMagnet.Key}")" Value="@($"add_magnet {CCMagnet.Value}")" Icon="add_magnet"></RadzenMenuItem>
                            }
                        </RadzenMenuItem>
                        @* <RadzenMenuItem Text="Seed Folder" Value="@("seed_folder")" Icon="add"></RadzenMenuItem> *@
                        <RadzenMenuItem Text="Pause All" Value="@("pause_all")" Icon="pause"></RadzenMenuItem>
                        <RadzenMenuItem Text="Resume All" Value="@("play_arrow")" Icon="play_arrow"></RadzenMenuItem>
                        <RadzenMenuItem Text="Deselect All" Value="@("deselect_all")" Icon="deselect"></RadzenMenuItem>
                        <RadzenMenuItem Text="Select All" Value="@("select_all")" Icon="done_all"></RadzenMenuItem>
                        <RadzenMenuItem Text="Remove All Completed" Value="@("remove_done")" Icon="delete"></RadzenMenuItem>
                        <RadzenMenuItem Text="Remove All" Value="@("remove_all")" Icon="delete"></RadzenMenuItem>
                    </RadzenMenuItem>
                    @* <RadzenMenuItem Text="Tools" Icon="settings">
                    <RadzenMenuItem Text="Options" Value="@("checkbox")" Icon="tune"></RadzenMenuItem>
                    </RadzenMenuItem> *@
                </RadzenMenu>
            </div>
        </RadzenStack>
    </RadzenHeader>
    <RadzenSidebar @bind-Expanded="@sidebar1Expanded">
        <RadzenPanelMenu>
            <RadzenPanelMenuItem Text="Home" Icon="home" Path="" />
            <RadzenPanelMenuItem Text="Network" Icon="hub" Path="network" />
            <RadzenPanelMenuItem Target="_blank" Text="GitHub" Image="github-mark-white.svg" Path="https://github.com/LostBeard/SpawnDev.BlazorJS.WebTorrents" />
        </RadzenPanelMenu>
        <div class="rz-p-4">
            @if (!string.IsNullOrEmpty(AppService.PosterHref))
            {
                <RadzenImage Path="@AppService.PosterHref" Style="width: 100%;" />
            }
        </div>
    </RadzenSidebar>
    <RadzenBody Style="position: relative;">
        <div style="position: absolute; top: 0; left: 0; width: 100%; height: 100%;">
            @Body
        </div>
    </RadzenBody>
    <RadzenFooter>
        <RadzenLink Target="_blank" Image="https://avatars.githubusercontent.com/u/5800008?s=48&v=4" Text="WebTorrent" Path="https://github.com/webtorrent/webtorrent" /> <span title="WebTorrent version">@WebTorrentService.BundledLibraryVersion</span>
    </RadzenFooter>
</RadzenLayout>

@code {
    [Inject]
    AppService AppService { get; set; }

    [Inject]
    BlazorJSRuntime JS { get; set; }

    [Inject]
    NotificationService NotificationService { get; set; }

    [Inject]
    DialogService DialogService { get; set; }

    [Inject]
    WebTorrentService WebTorrentService { get; set; }

    bool sidebar1Expanded = true;
    protected override void OnInitialized()
    {
        NavigationManager.LocationChanged += NavigationManager_LocationChanged;
    }
    private void NavigationManager_LocationChanged(object? sender, Microsoft.AspNetCore.Components.Routing.LocationChangedEventArgs e)
    {
        AfterLocationChanged(e.HistoryEntryState);
    }
    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            AfterLocationChanged();
        }
    }
    [Inject]
    protected NavigationManager NavigationManager { get; set; }
    public Type? PageType { get; private set; }
    public string PageTypeName => PageType?.Name ?? "";
    public string Location { get; private set; } = "";
    public string? HistoryEntryState { get; private set; }
    public DateTime LocationUpdated { get; private set; } = DateTime.MinValue;
    void AfterLocationChanged(string? historyEntryState = null)
    {
        var pageType = Body != null && Body.Target != null && Body.Target is RouteView routeView ? routeView.RouteData.PageType : null;
        var location = NavigationManager.Uri;
        if (PageType == pageType && Location == location)
        {
            Console.WriteLine($"SendLocationChanged: false");
            return;
        }
        LocationUpdated = DateTime.Now;
        PageType = pageType;
        Location = location;
        HistoryEntryState = historyEntryState;
        Console.WriteLine($"LocationChanged: {PageTypeName} [{HistoryEntryState ?? ""}] {Location}");
    }
    void AppService_OnStateChanged()
    {
        StateHasChanged();
    }
    async Task OnMenuClicked(MenuItemEventArgs args)
    {
        if (args.Value is string valueStr)
        {
            if (valueStr.StartsWith("add_magnet "))
            {
                var magnet = valueStr.Substring(valueStr.IndexOf(" ") + 1);
                await WebTorrentService.GetTorrent(magnet);
            }
            switch (valueStr)
            {
                case "seed_folder":

                    break;
                case "seed_files":
                    try
                    {
                        var seedOptions = await NewSeedDialog.Show(DialogService);
                        if (seedOptions != null)
                        {
                            WebTorrentService.Client!.Seed(seedOptions.Files, seedOptions.SeedOptions);
                        }
                    }
                    catch
                    {
                        
                    }
                    break;
                case "torrent_file_picker":
                    var files = await FilePicker.ShowOpenFilePicker(".torrent", true);
                    if (files != null)
                    {
                        foreach (var file in files)
                        {
                            try
                            {
                                using var arrayBuffer = await file.ArrayBuffer();
                                using var uint8array = new Uint8Array(arrayBuffer);
                                // TODO - add dialog with add torrent options (also use it when adding torrent via magnet)
                                WebTorrentService.Client!.Add(uint8array);
                            }
                            catch (Exception ex)
                            {
                                JS.Log("torrent_file_picker failed:", ex.Message);
                            }
                            file.Dispose();
                        }
                    }
                    break;
                case "add_magnet":
                    var magnet = await AddMagnetDialog.Show(DialogService);
                    if (!string.IsNullOrEmpty(magnet))
                    {
                        try
                        {
                            await WebTorrentService.GetTorrent(magnet);
                            NotificationService.Notify(NotificationSeverity.Success, "Torrent added");
                        }
                        catch (Exception ex)
                        {
                            NotificationService.Notify(NotificationSeverity.Error, ex.Message, "Failed to add torrent");
                        }
                    }
                    break;
                case "remove_done":
                    try
                    {
                        var count = WebTorrentService.RemoveCompleted(false);
                        var confirmation = await DialogService.Confirm($"Remove {count} torrents and all the related data?");
                        if (confirmation == true)
                        {
                            WebTorrentService.RemoveCompleted(true);
                        }
                    }
                    catch { }
                    break;
                case "remove_all":
                    try
                    {
                        var count = WebTorrentService.RemoveAllTorrents(false);
                        var confirmation = await DialogService.Confirm($"Remove {count} torrents and all the related data?");
                        if (confirmation == true)
                        {
                            WebTorrentService.RemoveAllTorrents(true);
                        }
                    }
                    catch { }
                    break;
                case "deselect_all":
                    try
                    {
                        using var torrents = WebTorrentService.Client!.Torrents;
                        foreach (Torrent t in torrents.ToArray())
                        {
                            t.DeselectAll();
                            t.Dispose();
                        }
                    }
                    catch { }
                    break;
                case "select_all":
                    try
                    {
                        using var torrents = WebTorrentService.Client!.Torrents;
                        foreach (Torrent t in torrents.ToArray())
                        {
                            t.SelectAll();
                            t.Dispose();
                        }
                    }
                    catch { }
                    break;
                case "pause_all":
                    try
                    {
                        using var torrents = WebTorrentService.Client!.Torrents;
                        foreach (Torrent t in torrents.ToArray())
                        {
                            t.Pause();
                            t.Dispose();
                        }
                    }
                    catch { }
                    break;
                case "resume_all":
                    try
                    {
                        using var torrents = WebTorrentService.Client!.Torrents;
                        foreach (Torrent t in torrents.ToArray())
                        {
                            t.Resume();
                            t.Dispose();
                        }
                    }
                    catch { }
                    break;
            }
        }
    }
}