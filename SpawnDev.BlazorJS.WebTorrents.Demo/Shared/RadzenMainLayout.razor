@inherits LayoutComponentBase
@using SpawnDev.BlazorJS.JSObjects;
@using SpawnDev.BlazorJS.Toolbox;

<RadzenComponents />
<RadzenLayout>
    <RadzenHeader>
        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0">
            <RadzenSidebarToggle Style="margin: 0;" Click="@(() => sidebar1Expanded = !sidebar1Expanded)" />
            <div>
                <RadzenMenu Click="OnMenuClicked">
                    <RadzenMenuItem Text="Torrent" Image="favicon.png">
                        <RadzenMenuItem Text="Add Torrent" Value="@("torrent_file_picker")" Icon="add"></RadzenMenuItem>
                        <RadzenMenuItem Text="Add Magnet" Value="@("add_magnet")" Icon="add"></RadzenMenuItem>
                        <RadzenMenuItem Text="Creative Commons" Icon="spoke">
                            @foreach (var CCMagnet in WebTorrentService.CCMagnets)
                            {
                                <RadzenMenuItem Text="@($"Add {CCMagnet.Key}")" Value="@($"add_magnet {CCMagnet.Value}")" Icon="add"></RadzenMenuItem>
                            }
                        </RadzenMenuItem>
                        <RadzenMenuItem Text="Remove All Completed" Value="@("remove_done")" Icon="delete"></RadzenMenuItem>
                    </RadzenMenuItem>
                    @* <RadzenMenuItem Text="Tools" Icon="settings">
                        <RadzenMenuItem Text="Options" Value="@("checkbox")" Icon="tune"></RadzenMenuItem>
                    </RadzenMenuItem> *@
                </RadzenMenu>
            </div>
        </RadzenStack>
    </RadzenHeader>
    <RadzenSidebar @bind-Expanded="@sidebar1Expanded">
        <RadzenPanelMenu>
            <RadzenPanelMenuItem Text="Home" Icon="home" Path="" />
            <RadzenPanelMenuItem Target="_blank" Text="GitHub" Image="github-mark-white.svg" Path="https://github.com/LostBeard/SpawnDev.BlazorJS.WebTorrents" />
        </RadzenPanelMenu>
        <div class="rz-p-4">
            @if (!string.IsNullOrEmpty(AppService.PosterHref))
            {
                <RadzenImage Path="@AppService.PosterHref" Style="width: 100%;" />
            }
        </div>
    </RadzenSidebar>
    <RadzenBody Style="position: relative;">
        <div style="position: absolute; top: 0; left: 0; width: 100%; height: 100%;">
            @Body
        </div>
    </RadzenBody>
    <RadzenFooter>
        <RadzenLink Target="_blank" Image="https://avatars.githubusercontent.com/u/5800008?s=48&v=4" Text="WebTorrent" Path="https://github.com/webtorrent/webtorrent" />
    </RadzenFooter>
</RadzenLayout>

@code {
    [Inject]
    AppService AppService { get; set; }

    [Inject]
    BlazorJSRuntime JS { get; set; }

    [Inject]
    NotificationService NotificationService { get; set; }

    [Inject]
    DialogService DialogService { get; set; }

    [Inject]
    WebTorrentService WebTorrentService { get; set; }

    bool sidebar1Expanded = true;

    void AppService_OnStateChanged()
    {
        StateHasChanged();
    }
    async Task OnMenuClicked(MenuItemEventArgs args)
    {
        if (args.Value is string valueStr)
        {
            if (valueStr.StartsWith("add_magnet "))
            {
                var magnet = valueStr.Substring(valueStr.IndexOf(" ") + 1);
                await WebTorrentService.GetTorrent(magnet);
            }
            switch (valueStr)
            {
                case "torrent_file_picker":
                    var files = await FilePicker.ShowOpenFilePicker(".torrent", true);
                    if (files != null)
                    {
                        foreach (var file in files)
                        {
                            try
                            {
                                using var arrayBuffer = await file.ArrayBuffer();
                                using var uint8array = new Uint8Array(arrayBuffer);
                                // TODO - add dialog with add torrent options (also use it when adding torrent via magnet)
                                WebTorrentService.Client!.Add(uint8array);
                            }
                            catch { }
                            file.Dispose();
                        }
                    }
                    break;
                case "add_magnet":
                    var magnet = await AddMagnetDialog.Show(DialogService);
                    if (!string.IsNullOrEmpty(magnet))
                    {
                        try
                        {
                            await WebTorrentService.GetTorrent(magnet);
                            NotificationService.Notify(NotificationSeverity.Success, "Torrent added");
                        }
                        catch (Exception ex)
                        {
                            NotificationService.Notify(NotificationSeverity.Error, ex.Message, "Failed to add torrent");
                        }
                    }
                    break;
                case "remove_done":
                    try
                    {
                        var count = await WebTorrentService.RemoveCompleted(false);

                        var confirmation = await DialogService.Confirm($"Remove {count} torrents and all the related data?");
                        if (confirmation == true)
                        {
                            await WebTorrentService.RemoveCompleted(true);
                        }
                    }
                    catch { }
                    break;
            }
        }
    }
}