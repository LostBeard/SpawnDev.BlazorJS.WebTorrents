@using SpawnDev.BlazorJS.WebTorrents
@using SpawnDev.BlazorJS.VisNetwork
@implements IDisposable

<VisNetworkView Style="top: 0; left: 0; width: 100%; height: 100%; background-color: #101010; position: absolute;" @ref="_netVis" UpdateData=Update OnDoubleClick="Network_OnDoubleClick" OnClick="Network_OnClick" OnContext="Network_OnContext" />

@code {
    void Network_OnContext(NetworkContextEvent networkContextEvent)
    {
        JS.Log("Network_OnContext");
        var eventNodeId = _netVis!.Network!.GetNodeAt(networkContextEvent.Pointer.DOM);
        // the selected node id (if one) may not be the same as the eventNodeId that was right clicked on (if one)
        var selectedNodeId = networkContextEvent.Nodes.FirstOrDefault();
        var selectedEdgeId = networkContextEvent.Edges.FirstOrDefault();
        JS.Log("_eventNodeId", eventNodeId);
        JS.Log("_selectedNodeId", selectedNodeId);
        JS.Log("_selectedEdgeId", selectedEdgeId);

    }
    void Network_OnDoubleClick(NetworkEvent networkContextEvent)
    {
        JS.Log("Network_OnDoubleClick");
        var eventNodeId = _netVis!.Network!.GetNodeAt(networkContextEvent.Pointer.DOM);
        // the selected node id (if one) may not be the same as the eventNodeId that was right clicked on (if one)
        var selectedNodeId = networkContextEvent.Nodes.FirstOrDefault();
        var selectedEdgeId = networkContextEvent.Edges.FirstOrDefault();
        JS.Log("_eventNodeId", eventNodeId);
        JS.Log("_selectedNodeId", selectedNodeId);
        JS.Log("_selectedEdgeId", selectedEdgeId);
        // // create minimal MouseEventArgs required for call to Radzen ContextMenuService.Open()
        // using var domEvent = networkContextEvent.Event;
        // var mouseArgs = new MouseEventArgs
        //     {
        //         ClientX = domEvent.JSRef.Get<float>("clientX"),
        //         ClientY = domEvent.JSRef.Get<float>("clientY"),
        //     };
        if (!string.IsNullOrEmpty(selectedNodeId))
        {
            var visNode = _netVis!.Nodes!.Get(selectedNodeId);
            if (visNode != null)
            {
                JS.Log("_visNode", visNode);
                JS.Set("_visNode", visNode);
                if (visNode.Tag == "torrent")
                {
                    WebTorrentService.Client!.GetTorrentByInstanceId(selectedNodeId, out var torrent);
                    JS.Log("_torrent", torrent);
                    JS.Set("_torrent", torrent);
                    JS.Log("_magnet", torrent?.MagnetURI);
                    JS.Set("_magnet", torrent?.MagnetURI);
                    torrent?.Destroy(new DestroyTorrentOptions { DestroyStore = true });
                }
                else if (visNode.Tag == "wire")
                {
                    WebTorrentService.Client!.GetWireByInstanceId(selectedNodeId, out var torrent, out var wire);
                    JS.Log("_torrent", torrent);
                    JS.Set("_torrent", torrent);
                    JS.Log("_wire", wire);
                    JS.Set("_wire", wire);
                    if (torrent != null && wire != null)
                    {
                        torrent.RemovePeer(wire.PeerId);
                    }
                }
            }
        }
        if (!string.IsNullOrEmpty(selectedEdgeId))
        {
            var visEdge = _netVis!.Edges!.Get(selectedEdgeId);
            if (visEdge != null)
            {
                JS.Log("_visEdge", visEdge);
                JS.Set("_visEdge", visEdge);
            }
        }
    }
    void Network_OnClick(NetworkEvent networkContextEvent)
    {
        JS.Log("Network_OnClick");
        var eventNodeId = _netVis!.Network!.GetNodeAt(networkContextEvent.Pointer.DOM);
        // the selected node id (if one) may not be the same as the eventNodeId that was right clicked on (if one)
        var selectedNodeId = networkContextEvent.Nodes.FirstOrDefault();
        var selectedEdgeId = networkContextEvent.Edges.FirstOrDefault();
        JS.Log("_eventNodeId", eventNodeId);
        JS.Log("_selectedNodeId", selectedNodeId);
        JS.Log("_selectedEdgeId", selectedEdgeId);
        // // create minimal MouseEventArgs required for call to Radzen ContextMenuService.Open()
        // using var domEvent = networkContextEvent.Event;
        // var mouseArgs = new MouseEventArgs
        //     {
        //         ClientX = domEvent.JSRef.Get<float>("clientX"),
        //         ClientY = domEvent.JSRef.Get<float>("clientY"),
        //     };
        if (!string.IsNullOrEmpty(selectedNodeId))
        {
            var visNode = _netVis!.Nodes!.Get(selectedNodeId);
            if (visNode != null)
            {
                JS.Log("_visNode", visNode);
                JS.Set("_visNode", visNode);
                if (visNode.Tag == "torrent")
                {
                    WebTorrentService.Client!.GetTorrentByInstanceId(selectedNodeId, out var torrent);
                    JS.Log("_torrent", torrent);
                    JS.Set("_torrent", torrent);
                    JS.Log("_magnet", torrent?.MagnetURI);
                    JS.Set("_magnet", torrent?.MagnetURI);
                }
                else if (visNode.Tag == "wire")
                {
                    WebTorrentService.Client!.GetWireByInstanceId(selectedNodeId, out var torrent, out var wire);
                    JS.Log("_torrent", torrent);
                    JS.Set("_torrent", torrent);
                    JS.Log("_wire", wire);
                    JS.Set("_wire", wire);
                    // if (torrent != null && wire != null)
                    // {
                    //     torrent.RemovePeer(wire.PeerId);
                    // }
                }
            }
        }
        if (!string.IsNullOrEmpty(selectedEdgeId))
        {
            var visEdge = _netVis!.Edges!.Get(selectedEdgeId);
            if (visEdge != null)
            {
                JS.Log("_visEdge", visEdge);
                JS.Set("_visEdge", visEdge);
            }
        }
    }

    [Inject]
    BlazorJSRuntime JS { get; set; }
    [Inject]
    WebTorrentService WebTorrentService { get; set; }
    VisNetworkView? _netVis { get; set; }
    static VisFont defaultNodeFont = new VisFont { Color = "#ffffff", Background = "#111111aa" };
    static VisFont offlineNodeFont = new VisFont { Color = "#ffffff66", Background = "#111111aa" };
    static VisFont onlineNodeFont = new VisFont { Color = "#ffffff", Background = "#111111aa" };
    VisNode rootNode = new VisNode { Id = "app-root-node", Shape = "circularImage", Image = "icon-192.png", Font = defaultNodeFont, BorderWidth = 0, Color = new VisNodeColor { Background = "#00000000" } };
    System.Timers.Timer _tmr = new();
    void Timer_Elapsed(object? sender, System.Timers.ElapsedEventArgs e)
    {
        StateHasChanged();
    }
    protected override async Task OnInitializedAsync()
    {
        WebTorrentService.OnTorrentAdd += WebTorrent_OnTorrentAdd;
        WebTorrentService.OnTorrentRemove += WebTorrent_OnTorrentRemove;
        WebTorrentService.OnTorrentWireAdd += WebTorrent_OnTorrentWireAdd;
        WebTorrentService.OnTorrentWireRemove += WebTorrent_OnTorrentWireRemove;
        _tmr.Elapsed += Timer_Elapsed;
        _tmr.Interval = 1000;
        _tmr.Enabled = true;
    }
    public void Dispose()
    {
        _tmr.Enabled = false;
        _tmr.Elapsed -= Timer_Elapsed;
        WebTorrentService.OnTorrentAdd -= WebTorrent_OnTorrentAdd;
        WebTorrentService.OnTorrentRemove -= WebTorrent_OnTorrentRemove;
        WebTorrentService.OnTorrentWireAdd -= WebTorrent_OnTorrentWireAdd;
        WebTorrentService.OnTorrentWireRemove -= WebTorrent_OnTorrentWireRemove;
    }
    void WebTorrent_OnTorrentWireRemove(Torrent torrent, Wire wire)
    {
        StateHasChanged();
    }
    void WebTorrent_OnTorrentWireAdd(Torrent torrent, Wire wire)
    {
        StateHasChanged();
    }
    void WebTorrent_OnTorrentAdd(Torrent torrent)
    {
        StateHasChanged();
    }
    void WebTorrent_OnTorrentRemove(Torrent torrent)
    {
        StateHasChanged();
    }
    void ClearNetVis()
    {
        if (_netVis == null) return;
        _netVis.Clear();
        _netVis.Nodes?.Add(rootNode);
    }
    bool _updating = false;
    bool _firstUpdate = true;
    // !! NOTE !!
    // Do not call Update directly. It is passed to VisNetworkView which will call it when it is (re-)rendered
    async Task Update()
    {
        if (_netVis == null) return;
        if (_updating) return;
        _updating = true;
        if (_firstUpdate)
        {
            _firstUpdate = false;
            JS.Set("_networkData", _netVis.NetworkData);
        }
        try
        {
            var nodeIds = new List<string> { rootNode.Id };
            var edgeIds = new List<string>();
            rootNode.Label = ShortPeerId(WebTorrentService.Client!.PeerId);
            _netVis.Nodes!.Update(rootNode);
            foreach (Torrent torrent in WebTorrentService.Client!.Torrents.ToArray())
            {
                var (torrentNode, torrentToRootEdge) = AddOrUpdateNodeTorrent(torrent);
                nodeIds.Add(torrentNode.Id);
                edgeIds.Add(torrentToRootEdge.Id);
                using var wires = torrent.Wires;
                foreach (Wire wire in wires.ToArray())
                {
                    var (wireNode, wireToTorrentEdge) = AddOrUpdateNodeWire(torrent, wire);
                    nodeIds.Add(wireNode.Id);
                    edgeIds.Add(wireToTorrentEdge.Id!);
                    wire.Dispose();
                }
            }
            var removedNodeIds = _netVis!.Nodes!.GetIds().Except(nodeIds).ToList();
            var removedEdgeIds = _netVis!.Edges!.GetIds().Except(edgeIds).ToList();
            if (removedNodeIds.Count > 0) _netVis.Nodes.Remove(removedNodeIds);
            if (removedEdgeIds.Count > 0) _netVis.Edges.Remove(removedEdgeIds);
        }
        finally
        {
            _updating = false;
        }
    }
    string ReadableBps(double len)
    {
        return $"{ReadableByteLength(len)}/s";
    }
    string ReadableByteLength(double len)
    {
        string[] sizes = { "B", "KB", "MB", "GB", "TB" };
        int order = 0;
        while (len >= 1024 && order < sizes.Length - 1)
        {
            order++;
            len = len / 1024;
        }
        // Adjust the format string to your preferences. For example "{0:0.#}{1}" would
        // show a single decimal place, and no space.
        return String.Format("{0:0.##} {1}", len, sizes[order]);
    }

    string ShortPeerId(string peerId)
    {
        return string.IsNullOrEmpty(peerId) ? peerId : peerId.Substring(peerId.Length - 10);
    }

    Dictionary<string, string> InstanceIcons = new Dictionary<string, string> {
            { "torrent", "torrent.png" },
            { "webSeed", "webSeed.png"},
            { "webrtc", "webrtc.png"},
        };
    (VisNode, VisEdge) AddOrUpdateNodeWire(Torrent torrent, Wire wire)
    {
        var nodeId = wire.InstanceId;
        var edgeToId = torrent.InstanceId;
        var edgeId = $"{nodeId}>>{edgeToId}";
        var isSeeder = wire.IsSeeder;
        var node = _netVis!.Nodes!.Get(nodeId);
        var downloadSpeed = wire.DownloadSpeed();
        var uploadSpeed = wire.UploadSpeed();
        var downloading = downloadSpeed > 0d;
        var uploading = uploadSpeed > 0d;
        float totalPieces = torrent.Bitfield?.Length ?? 0;
        float donePieces = isSeeder ? totalPieces : wire.PeerPieces?.PopCount() ?? 0;
        var percentDone = totalPieces == 0 ? 0 : donePieces / totalPieces;
        var baseName = !string.IsNullOrEmpty(wire.RemoteAddress) ? wire.RemoteAddress : ShortPeerId(wire.PeerId);
        var percentDoneStr = Math.Round(percentDone * 100f, 2) + $"% ({donePieces}/{totalPieces})";
        baseName += $" - {percentDoneStr}";
        var nodeLabel = $"{baseName}\n⬆ {ReadableByteLength(wire.Uploaded)} at {ReadableBps(uploadSpeed)}\n⬇ {ReadableByteLength(wire.Downloaded)} at {ReadableBps(uploadSpeed)}";
        if (node == null)
        {
            node = new VisNode
                {
                    Id = nodeId,
                    Label = nodeLabel,
                    Shape = "circularImage",
                    Image = InstanceIcons[wire.Type],
                    Font = isSeeder ? onlineNodeFont : offlineNodeFont,
                    Color = new VisNodeColor
                    {
                        Border = isSeeder ? "#ffffff" : "#00aa00",
                        Background = "#222222",
                    },
                    Opacity = isSeeder ? 1.0f : 0.5f,
                    Tag = "wire",
                    BorderWidth = isSeeder ? 4 : 2,
                    Title = "Double click to disconnect the peer",
                };
        }
        else
        {
            node.Label = nodeLabel;
            node.Font = isSeeder ? onlineNodeFont : offlineNodeFont;
            node.Color!.Border = isSeeder ? "#ffffff" : "#00aa00";
            node.Opacity = isSeeder ? 1.0f : 0.5f;
            node.BorderWidth = isSeeder ? 4 : 2;
        }
        _netVis!.Nodes.Update(node);
        // to torrent edge
        var interested = wire.AmInterested || wire.PeerInterested;
        var color = "";
        if (wire.AmInterested && wire.PeerInterested)
        {
            color = "#ffffff";
        }
        else if (!wire.AmInterested && !wire.PeerInterested)
        {
            color = "#555555";
        }
        else if (wire.AmInterested)
        {
            color = "#00ff00";
        }
        else
        {
            color = "#0000ff";
        }
        var edge = _netVis!.Edges!.Get(edgeId);
        if (edge == null)
        {
            edge = new VisEdge
                {
                    Id = edgeId,
                    From = nodeId,
                    To = edgeToId,
                    Dashes = !interested,
                    //Label = edgeLabel,
                    Color = new VisEdgeColor
                    {
                        Color = color,
                    },
                    // Background = new VisEdgeBackground
                    // {
                    //     Color = "#ff00ff",
                    //     Enabled = true,
                    //     Size = 10,
                    // },
                    Width = isSeeder || torrent.Done ? 6 : 2,
                    Arrows = new VisEdgeArrows
                    {
                        From = new VisEdgeArrowOptions { Enabled = uploading, },
                        To = new VisEdgeArrowOptions { Enabled = downloading, },
                    },
                };
        }
        else
        {
            //edge.Label = edgeLabel;
            edge.Dashes = !interested;
            edge.Color!.Color = color;
            edge.Width = isSeeder || torrent.Done ? 6 : 2;
            edge.Arrows!.From!.Enabled = uploading;
            edge.Arrows!.To!.Enabled = downloading;
        }
        _netVis!.Edges.Update(edge);
        return (node, edge);
    }
    (VisNode, VisEdge) AddOrUpdateNodeTorrent(Torrent torrent)
    {
        var nodeId = torrent.InstanceId;
        var edgeToId = rootNode.Id;
        var edgeId = $"{nodeId}>>{edgeToId}";
        var tDone = torrent.Done;
        var node = _netVis!.Nodes!.Get(nodeId);
        var nodeLabel = $"{torrent.Name} {Math.Round(torrent.Progress * 100d, 2)}%";
        if (node == null)
        {
            node = new VisNode
                {
                    Id = nodeId,
                    Label = nodeLabel,
                    Shape = "circularImage",
                    Image = InstanceIcons["torrent"],
                    Font = tDone ? onlineNodeFont : offlineNodeFont,
                    Color = new VisNodeColor
                    {
                        Border = tDone ? "#ffffff" : "#11111144",
                        Background = "#222222"
                    },
                    Opacity = tDone ? 1.0f : 0.5f,
                    Tag = "torrent",
                    Title = "Double click to destroy the torrent",
                };
        }
        else
        {
            node.Label = nodeLabel;
            node.Font = tDone ? onlineNodeFont : offlineNodeFont;
            node.Color!.Border = tDone ? "#ffffff" : "#00aa00";
            node.Opacity = tDone ? 1.0f : 0.5f;
        }
        _netVis!.Nodes.Update(node);
        // root edge
        var edge = _netVis!.Edges!.Get(edgeId);
        if (edge == null)
        {
            edge = new VisEdge
                {
                    Id = edgeId,
                    From = nodeId,
                    To = edgeToId,
                    Dashes = !tDone,
                    Color = new VisEdgeColor
                    {
                        Color = tDone ? "#ffffff" : "#ffffff55",
                    },
                    // Background = new VisEdgeBackground
                    // {
                    //     Color = "#ff00ff",
                    //     Enabled = true,
                    //     Size = 10,
                    // },
                    Width = tDone ? 6 : 2,
                };
        }
        else
        {
            edge.Dashes = !tDone;
            edge.Color!.Color = tDone ? "#ffffff" : "#000000";
            edge.Width = tDone ? 6 : 2;
        }
        _netVis!.Edges.Update(edge);
        return (node, edge);
    }
}
