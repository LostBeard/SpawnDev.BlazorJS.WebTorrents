@page "/peers"
@using SpawnDev.BlazorJS.WebTorrents
@using SpawnDev.BlazorJS.VisNetwork
@implements IDisposable

<VisNetworkView Style="width: 100%; height: 100%;" @ref="_netVis" UpdateData=Update />

@code {
    [Inject]
    WebTorrentService WebTorrentService { get; set; }
    VisNetworkView? _netVis { get; set; }
    static VisFont defaultNodeFont = new VisFont { Color = "#ffffff", Background = "#111111aa" };
    static VisFont offlineNodeFont = new VisFont { Color = "#ffffff66", Background = "#111111aa" };
    static VisFont onlineNodeFont = new VisFont { Color = "#ffffff", Background = "#111111aa" };
    VisNode rootNode = new VisNode { Id = "app-root-node", Shape = "circularImage", Image = "icon-192.png", Font = defaultNodeFont };
    protected override async Task OnInitializedAsync()
    {
        WebTorrentService.OnTorrentAdd += Rendezvous_OnTorrentAdd;
        WebTorrentService.OnTorrentRemove += Rendezvous_OnTorrentRemove;
        WebTorrentService.OnTorrentWireAdd += Rendezvous_OnTorrentWireAdd;
        WebTorrentService.OnTorrentWireRemove += Rendezvous_OnTorrentWireRemove;
    }
    public void Dispose()
    {
        WebTorrentService.OnTorrentAdd -= Rendezvous_OnTorrentAdd;
        WebTorrentService.OnTorrentRemove -= Rendezvous_OnTorrentRemove;
        WebTorrentService.OnTorrentWireAdd -= Rendezvous_OnTorrentWireAdd;
        WebTorrentService.OnTorrentWireRemove -= Rendezvous_OnTorrentWireRemove;
    }
    void Rendezvous_OnTorrentWireRemove(Torrent torrent, Wire wire)
    {
        StateHasChanged();
    }
    void Rendezvous_OnTorrentWireAdd(Torrent torrent, Wire wire)
    {
        StateHasChanged();
    }
    void Rendezvous_OnTorrentAdd(Torrent torrent)
    {
        StateHasChanged();
    }
    void Rendezvous_OnTorrentRemove(Torrent torrent)
    {
        StateHasChanged();
    }
    void ClearNetVis()
    {
        if (_netVis == null) return;
        _netVis.Clear();
        _netVis.Nodes?.Add(rootNode);
    }

    Dictionary<string, VisNode> Nodes { get; } = new Dictionary<string, VisNode>();
    Dictionary<string, VisEdge> Edges { get; } = new Dictionary<string, VisEdge>();
    bool _updating = false;
    // !! NOTE !!
    // Do not call Update directly. Call StateHasChanged() and NetVisView will call Update itself if it is ready for it.
    async Task Update()
    {
        if (_netVis == null) return;
        if (_updating) return;
        _updating = true;
        try
        {
            try
            {
                _netVis.Nodes.Update(rootNode);
            }
            catch
            {
                return;
            }
            var nodeIds = new List<string>();
            var edgeIds = new List<string>();
            foreach (Torrent torrent in WebTorrentService.WebTorrent!.Torrents)
            {
                var (torrentNode, torrentToRootEdge) = AddOrUpdateNodeTorrent(torrent);
                nodeIds.Add(torrentNode.Id);
                edgeIds.Add(torrentToRootEdge.Id);
                using var wires = torrent.Wires;
                foreach (Wire wire in wires)
                {
                    var (wireNode, wireToTorrentEdge) = AddOrUpdateNodeWire(torrent, wire);
                    nodeIds.Add(wireNode.Id);
                    edgeIds.Add(wireToTorrentEdge.Id!);
                    wire.Dispose();
                }
            }
            var removedNodeIds = Nodes.Values.Where(o => !string.IsNullOrEmpty(o.Id) && !nodeIds.Contains(o.Id)).Select(o => o.Id).ToList();
            var removedEdgeIds = Edges.Values.Where(o => !string.IsNullOrEmpty(o.Id) && !edgeIds.Contains(o.Id)).Select(o => o.Id!).ToList();
            if (removedNodeIds.Count > 0) _netVis.Nodes.Remove(removedNodeIds);
            if (removedEdgeIds.Count > 0) _netVis.Edges.Remove(removedEdgeIds);
        }
        finally
        {
            _updating = false;
        }
    }
    Dictionary<string, string> InstanceIcons = new Dictionary<string, string> {
            { "Window", "media/window-64.png" },
            { "DedicatedWorkerGlobalScope", "media/blue-gear-64.png" },
            { "SharedWorkerGlobalScope", "media/red-gear-64.png" },
        };
    (VisNode, VisEdge) AddOrUpdateNodeWire(Torrent torrent, Wire wire)
    {
        var nodeId = wire.InstanceId;
        var edgeToId = torrent.InstanceId;
        var edgeId = $"{nodeId}>>{edgeToId}";
        var tDone = true;
        var nodeChanged = true;
        if (!Nodes.TryGetValue(nodeId, out var node))
        {
            node = new VisNode
                {
                    Id = nodeId,
                    Label = wire.PeerId,
                    Shape = "circularImage",
                    Image = InstanceIcons["Window"],
                    Font = tDone ? onlineNodeFont : offlineNodeFont,
                    Color = new VisNodeColor
                    {
                        Border = tDone ? "#ff0000" : "#11111144",
                        Background = "#222222"
                    },
                    Opacity = tDone ? 1.0f : 0.5f,
                };
            Nodes[node.Id] = node;
        }
        else
        {
            //eventNodeId.Shape = "circularImage";
            //eventNodeId.Image = image;
            node.Font = tDone ? onlineNodeFont : offlineNodeFont;
            node.Color = new VisNodeColor { Border = tDone ? "#ff0000" : "#11111144" };
            node.Opacity = tDone ? 1.0f : 0.5f;
        }
        node.Tag = wire;
        if (nodeChanged) _netVis!.Nodes.Update(node);
        //
        // root edge
        var someBool = false;
        var edgeChanged = true;
        if (!Edges.TryGetValue(edgeId, out var edge))
        {
            edge = new VisEdge
                {
                    Id = edgeId,
                    From = nodeId,
                    To = edgeToId,
                    Dashes = !someBool,
                    Background = new VisEdgeBackground
                    {
                        Color = someBool ? "#ffffff" : "#000000",
                        Enabled = true,
                        Size = 1,
                    }
                };
            Edges[edge.Id] = edge;
        }
        else
        {
            edge.Dashes = !someBool;
            edge.Background!.Color = someBool ? "#ffffff" : "#000000";
            edge.Background.Enabled = true;
            edge.Background.Size = 1;
        }
        if (edgeChanged) _netVis!.Edges.Update(edge);
        // ...
        return (node, edge);
    }
    (VisNode, VisEdge) AddOrUpdateNodeTorrent(Torrent torrent)
    {
        var nodeId = torrent.InstanceId;
        var edgeToId = rootNode.Id;
        var edgeId = $"{nodeId}>>{edgeToId}";
        var tDone = true;
        //using var devicePlatform = PlatformService.Platform.Parse(device.UserAgent);
        //var platformIcon = PlatformService.GetUserAgentIcon(torrent.UserAgent);
        var nodeChanged = true;
        if (!Nodes.TryGetValue(nodeId, out var node))
        {
            node = new VisNode
                {
                    Id = nodeId,
                    Label = torrent.Name,
                    Shape = "square",
                    Image = InstanceIcons["Window"],
                    Font = tDone ? onlineNodeFont : offlineNodeFont,
                    Color = new VisNodeColor
                    {
                        Border = tDone ? "#ff0000" : "#11111144",
                        Background = "#222222"
                    },
                    Opacity = tDone ? 1.0f : 0.5f,
                };
            Nodes[node.Id] = node;
        }
        else
        {
            node.Label = torrent.Name;
            node.Font = tDone ? onlineNodeFont : offlineNodeFont;
            node.Color = new VisNodeColor { Border = tDone ? "#ff0000" : "#11111144" };
            node.Opacity = tDone ? 1.0f : 0.5f;
        }
        node.Tag = torrent;
        if (nodeChanged) _netVis!.Nodes.Update(node);
        // root edge
        var someBool = false;
        var edgeChanged = true;
        if (!Edges.TryGetValue(edgeId, out var edge))
        {
            edge = new VisEdge
                {
                    Id = edgeId,
                    From = nodeId,
                    To = edgeToId,
                    Dashes = !someBool,
                    Background = new VisEdgeBackground
                    {
                        Color = someBool ? "#ffffff" : "#000000",
                        Enabled = true,
                        Size = 1,
                    }
                };
            Edges[edge.Id] = edge;
        }
        else
        {
            edge.Dashes = !someBool;
            edge.Background!.Color = someBool ? "#ffffff" : "#000000";
            edge.Background.Enabled = true;
            edge.Background.Size = 1;
        }
        if (edgeChanged) _netVis!.Edges.Update(edge);
        // ...
        return (node, edge);
    }
}
