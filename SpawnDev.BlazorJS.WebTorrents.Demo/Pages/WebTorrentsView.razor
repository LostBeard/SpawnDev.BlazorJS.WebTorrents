@page "/"
@implements IDisposable

<div style="height: 100%; height: 100%;">
    <RadzenSplitter Orientation="Orientation.Vertical" style="height: 100%; height: 100%;">
        <RadzenSplitterPane Size="40%" Min="30px">
            <TorrentsDataGrid SelectedTorrentChanged="@SelectedTorrentChanged" />
        </RadzenSplitterPane>
        <RadzenSplitterPane>
            <RadzenTabs RenderMode="TabRenderMode.Client" Style="position: relative; height: 100%;">
                <Tabs>
                    <RadzenTabsItem Text="Network" Style="position: relative; height: 100%;">
                        <div style="position: relative; width: 100%; height: 100%;">
                            <PeerView />
                        </div>
                    </RadzenTabsItem>
                    <RadzenTabsItem Text="Files">
                        <FilesDataGrid TorrentInstanceId="@SelectedTorrentInstanceId" />
                    </RadzenTabsItem>
                    <RadzenTabsItem Text="Peers">
                        <WiresDataGrid TorrentInstanceId="@SelectedTorrentInstanceId" />
                    </RadzenTabsItem>
                </Tabs>
            </RadzenTabs>
        </RadzenSplitterPane>
    </RadzenSplitter>
</div>

@code {
    // overall download
    // overall upload
    // overall speed 
    // overall progress
    // torrent upload, download speeds ✔
    // torrent upload, download totals ✔
    // torrent pieces
    // torrent files ✔
    // torrent peers ✔
    // torrent total peers ✔
    // torrent total seeds ✔
    // play torrent
    // delete torrent ✔
    // pause/resume ✔
    // select/deselect file
    // add magnet ✔
    // add torrent file picker
    // seed file picker
    // seed dir picker
    // options
    // upload/download throttles
    // delete all app data option
    // video/audio players
    // export completed torrents file(s)
    [Inject]
    WebTorrentService WebTorrentService { get; set; }

    Torrent? SelectedTorrent { get; set; }
    string SelectedTorrentInstanceId = "";

    void SelectedTorrentChanged(string instanceId)
    {
        if (SelectedTorrent != null)
        {
            if (SelectedTorrent.InstanceId == instanceId)
            {
                return;
            }
            SelectedTorrent.Dispose();
        }
        SelectedTorrent = WebTorrentService.Client!.GetTorrentByInstanceId(instanceId);
        SelectedTorrentInstanceId = SelectedTorrent?.InstanceId ?? "";
    }

    System.Timers.Timer _tmr = new();
    protected override async Task OnInitializedAsync()
    {
        WebTorrentService.OnTorrentAdd += Rendezvous_OnTorrentAdd;
        WebTorrentService.OnTorrentRemove += Rendezvous_OnTorrentRemove;
        WebTorrentService.OnTorrentWireAdd += Rendezvous_OnTorrentWireAdd;
        WebTorrentService.OnTorrentWireRemove += Rendezvous_OnTorrentWireRemove;
        _tmr.Elapsed += Timer_Elapsed;
        _tmr.Interval = 1000;
        _tmr.Enabled = true;
        await WebTorrentService.EnableServer();
    }
    public void Dispose()
    {
        _tmr.Enabled = false;
        _tmr.Elapsed -= Timer_Elapsed;
        WebTorrentService.OnTorrentAdd -= Rendezvous_OnTorrentAdd;
        WebTorrentService.OnTorrentRemove -= Rendezvous_OnTorrentRemove;
        WebTorrentService.OnTorrentWireAdd -= Rendezvous_OnTorrentWireAdd;
        WebTorrentService.OnTorrentWireRemove -= Rendezvous_OnTorrentWireRemove;
    }
    void Timer_Elapsed(object? sender, System.Timers.ElapsedEventArgs e)
    {
        //StateHasChanged();
    }
    void Rendezvous_OnTorrentWireRemove(Torrent torrent, Wire wire)
    {
        //StateHasChanged();
    }
    void Rendezvous_OnTorrentWireAdd(Torrent torrent, Wire wire)
    {
        //StateHasChanged();
    }
    void Rendezvous_OnTorrentAdd(Torrent torrent)
    {
        //StateHasChanged();
    }
    void Rendezvous_OnTorrentRemove(Torrent torrent)
    {
        //StateHasChanged();
    }
}
